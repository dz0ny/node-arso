// Generated by CoffeeScript 1.6.2
var moment, oddaljenost, opendata, request, _;

request = require('request');

moment = require('moment');

_ = require('underscore');

oddaljenost = function(lat1, lon1, lat2, lon2) {
  var R;

  R = 6371;
  return Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1)) * R;
};

module.exports.location_from_name = function(name, cb) {
  return request.get("http://maps.googleapis.com/maps/api/geocode/json?address=" + (encodeURI(name)) + ",%20slovenija&sensor=false", function(err, b, res) {
    var krajg, loc;

    if (err) {
      return new Error(err);
    } else {
      res = JSON.parse(res);
      krajg = _.first(_.first(res.results).address_components).short_name;
      loc = _.first(res.results).geometry.location;
      return cb(krajg, loc);
    }
  });
};

opendata = function(loc, cb) {
  /*
    Vremenski radar na Lisci pri Sevnici sproti meri padavine nad Slovenijo in njeno bližnjo okolico.
    Slika prikazuje razporeditev in jakost padavin, izmerjenih vsakih 10 minut.
    Čas meritve je podan v univerzalnem koordiniranem času UTC; ustrezni uradni čas v Sloveniji je za
    eno uro (pozimi) oziroma za dve uri (poleti) večji. Jakost padavin je predstavljena s štirimi razredi:
    šibka (LOW), zmerna (MED), močna (HGH) in ekstremna (EXT) z možno točo.
  
    Barve označujejo verjetnost, da se ob prikazanem času na obarvanih območjih pojavlja toča 
    (zelena - ZELO MAJHNA, rumena - ZAZNAVNA; oranžna - MED/medium SREDNJA; rdeča - HGH/high VELIKA)
  */
  return request.get("http://opendata.si/vreme/report/?lat=" + (loc.lat.toFixed(4)) + "&lon=" + (loc.lng.toFixed(4)), function(err, b, data) {
    if (err) {
      return new Error(err);
    } else {
      data = JSON.parse(data);
      return cb(data.radar.rain_level, data.hailprob.hail_level, data.forecast.data);
    }
  });
};

module.exports.opendata_radar = function(loc, cb) {
  return opendata(loc, function(dez, toca, _napoved_data) {
    var dezm, msg_toca_dez, tocam;

    dezm = (function() {
      switch (dez) {
        case 25:
          return "Šibke padavine";
        case 50:
          return "Zmerne padavine";
        case 75:
          return "Močne padavine";
        case 100:
          return "Ekstremne padavine";
        default:
          return "Stabilno";
      }
    })();
    tocam = (function() {
      switch (toca) {
        case 33:
          return "zaznavno";
        case 66:
          return "srednjo";
        case 100:
          return "veliko";
        default:
          return "zelo majhno";
      }
    })();
    msg_toca_dez = "" + dezm + " z " + tocam + " verjetnostjo toče!";
    return cb({
      dezm: dezm,
      tocam: tocam,
      dez: dez,
      toca: toca,
      msg: msg_toca_dez
    });
  });
};

module.exports.opendata_napoved = function(loc, cb) {
  return opendata(loc, function(_dez, _toca, napoved_data) {
    var cez_dvanajst_ur, deznost, f, napoved, oblacnost, sedaj, stej, _i, _len;

    oblacnost = 0;
    deznost = 0;
    stej = 0;
    cez_dvanajst_ur = moment().add('h', 12);
    sedaj = moment();
    for (_i = 0, _len = napoved_data.length; _i < _len; _i++) {
      f = napoved_data[_i];
      "BIG IF, ni ravno šloganje sam vseeeno :)";
      if (moment(f.forecast_time).isAfter(sedaj) && moment(f.forecast_time).isBefore(cez_dvanajst_ur)) {
        oblacnost += f.clouds;
        deznost += f.rain;
        stej++;
      }
    }
    if ((deznost / stej) > 5 && (oblacnost / stej) > 5) {
      napoved = "V naslednjih 12 urah je možnost neviht";
    } else if ((oblacnost / stej) > 0) {
      napoved = "V naslednjih 12 urah je predvidena oblačnost";
    } else if ((deznost / stej) > 0) {
      napoved = "V naslednjih 12 urah so možne padavine";
    } else {
      napoved = "V naslednjih 12 urah se obeta stabilno vreme :)";
    }
    return cb({
      napovedm: napoved,
      napoved: napoved_data
    });
  });
};

module.exports.arso = function(loc, cb) {
  var yql;

  yql = function(yqlq, cbl) {
    var uri;

    uri = "http://query.yahooapis.com/v1/public/yql?format=json&q=" + encodeURIComponent(yqlq);
    return request({
      uri: uri
    }, function(error, response, body) {
      body = JSON.parse(body);
      return cbl(body.query.results);
    });
  };
  return yql('select metData.domain_altitude, metData.t, metData.tsValid_issued, metData.domain_longTitle, metData.domain_lat, metData.domain_lon from xml where url in (select title from atom where url="http://spreadsheets.google.com/feeds/list/0AvY_vCMQloRXdE5HajQxUGF5ZEZYUjhKNG9EeVl2bFE/od6/public/basic")', function(lokacije) {
    lokacije = lokacije.data;
    lokacije.sort(function(a, b) {
      a = oddaljenost(a.metData.domain_lat, a.metData.domain_lon, loc.lat, loc.lng);
      b = oddaljenost(b.metData.domain_lat, b.metData.domain_lon, loc.lat, loc.lng);
      return a - b;
    });
    return cb(_.first(lokacije));
  });
};
